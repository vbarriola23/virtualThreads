package com.bar.example.virtual.threads;

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.stream.DoubleStream;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

public class BatchProcess {

	static final Object mutex = new Object();

	record InputEntry(String url, String id, String startTime, String endTime) {
	}

	public static void main(String[] params) throws IOException {

		System.out.println("Starting Batch Process");
		List<InputEntry> inputEntries = readRecordEntriesFromCSVFile();
		processData(inputEntries);
	}

	public static void processData(List<InputEntry> inputEntries) {

		System.out.println("processData()");
		ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();
		for (InputEntry inputEntry : inputEntries) {

			Future<DoubleStream> future = executor.submit(() -> fetchData(inputEntry.url, inputEntry.startTime, inputEntry.endTime));
			
			try{			
				checkSensorData(future);
			}
			catch (ExecutionException | InterruptedException e) {
		        System.out.println("System failure"); 
		    }
		}
	}

	public static List<InputEntry> readRecordEntriesFromCSVFile() throws IOException {

		List<InputEntry> inputEntries = new ArrayList<>();

		try (Reader in = new FileReader("C:\\Users\\mbarr\\Documents\\recordEntriesPowerPlants.csv");
				CSVParser records = CSVFormat.DEFAULT.withHeader().withFirstRecordAsHeader().parse(in);) {

			for (CSVRecord record : records) {

				InputEntry inputEntry = new InputEntry(record.get(0), record.get(1), record.get(2), record.get(3));
				inputEntries.add(inputEntry);
			}
		}
		return inputEntries;
	}

	public static DoubleStream fetchData(String url, String startTime, String endTime)
			throws IOException, InterruptedException {

		URL pwUrl = new URL(url + "/startTime/endTime");
		// In a real application open a secure url stream and fetch the data
		// For this example we return some random data and simulate network latencies
		Thread.sleep((long) Math.random());	
		return DoubleStream.generate(() -> new Random().nextDouble()).limit(100);
	}

	public static void checkSensorData(Future<DoubleStream> future) throws InterruptedException, ExecutionException {

		double resultMean = 0;
		DoubleStream data = future.get();
		// Throttle access from virtual threads
		synchronized (mutex) {
			// Does parallel processing to improve performance using platform threads with all available multi-core processors 
			// In real application do proper data analysis,
			resultMean = data.parallel().average().getAsDouble();
		}
		System.out.println("Result:" + resultMean);
		if (resultMean > 0.49) {
			
			System.out.println("Alert clients of machine issues");
		}
	}
}
